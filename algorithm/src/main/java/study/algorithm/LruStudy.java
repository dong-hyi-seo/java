package study.algorithm;

/**
 * @author donghyi.seo
 * @since 2022-11-08
 * 1. Least Recently Used (LRU) 알고리즘
 * 캐시메모리는 CPU와 주기억장치(DRAM) 사이의 고속의 임시 메모리로서 CPU가 처리할 작업을 저장해 놓았다가
 * 필요할 때 바로 사용해서 처리속도를 높이는 장치이다. 워낙 비싸고 용량이 작아 효율적으로 사용해야한다.
 * 이때 알고리즘을 LRU알고리즘을 사용한다.
 * '캐시에서 작업을 제거할때 가장 오랫동안 사용하지 않은 것을 제거하겠다는 알고리즘'
 *
 * - 만약 캐시의 사이즈가 5이고 작업이 2,3,1,6,7 순으로 저장되어 있다면,
 * 맨앞이 가장 최근에 쓰인 작업이고, 맨 뒤는 가장 오랫동안 쓰이지 않는 작업이다.
 *
 * - Cache Miss: 해야 할 작업이 캐시에 없는 상태로 위 상태에서 만약 새로운 작업인 5번 작업을 CPU가 사용한다면
 * cache miss가 되고 모든 작업이 뒤로 밀리고 5번 작업은 캐시의 맨앞에 위치한다. 5,2,3,1,6 (7번 작업은 캐시에서 삭제된것)
 *
 * - Cache hit : 해야할 작업이 캐시에 있는 상태로 위 상태에서 만약 3번 작업을 CPU가 사용한다면 Cache hit가 되고,
 * 3번이 맨앞으로가고 나머지 5,2,1,6 순으로 뒤로 생긴다. 즉 3,5,2,1,6
 */
public class LruStudy {
}
